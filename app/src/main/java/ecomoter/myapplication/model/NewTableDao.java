package ecomoter.myapplication.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_TABLE".
*/
public class NewTableDao extends AbstractDao<NewTable, Void> {

    public static final String TABLENAME = "NEW_TABLE";

    /**
     * Properties of entity NewTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property A = new Property(0, String.class, "a", false, "A");
        public final static Property B = new Property(1, int.class, "b", false, "B");
    }


    public NewTableDao(DaoConfig config) {
        super(config);
    }
    
    public NewTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_TABLE\" (" + //
                "\"A\" TEXT," + // 0: a
                "\"B\" INTEGER NOT NULL );"); // 1: b
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewTable entity) {
        stmt.clearBindings();
 
        String a = entity.getA();
        if (a != null) {
            stmt.bindString(1, a);
        }
        stmt.bindLong(2, entity.getB());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewTable entity) {
        stmt.clearBindings();
 
        String a = entity.getA();
        if (a != null) {
            stmt.bindString(1, a);
        }
        stmt.bindLong(2, entity.getB());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public NewTable readEntity(Cursor cursor, int offset) {
        NewTable entity = new NewTable( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // a
            cursor.getInt(offset + 1) // b
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewTable entity, int offset) {
        entity.setA(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setB(cursor.getInt(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(NewTable entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(NewTable entity) {
        return null;
    }

    @Override
    public boolean hasKey(NewTable entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
